{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/media/betty/740eb11b-c677-43cf-84f1-0453faa34e51/betty/ESTUDIOS/REACT/NEXT-JS/audionoom/pages/channel.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport css from './styles.scss';\nimport Layout from '../components/Layout';\nimport Podcast from '../components/Podcasts';\nimport PodcastsPlayer from '../components/PodcastPlayer';\nimport Error from './_error';\n\nvar channel =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(channel, _Component);\n\n  function channel() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, channel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(channel)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      openPodcast: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"openPodcast\", function (e, podcast) {\n      e.preventDefault();\n\n      _this.setState({\n        openPodcast: podcast\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClosePodcast\", function (e) {\n      e.preventDefault();\n\n      _this.setState({\n        openPodcast: null\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(channel, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          channel = _this$props.channel,\n          audioClips = _this$props.audioClips,\n          series = _this$props.series,\n          statusCode = _this$props.statusCode;\n      var openPodcast = this.state;\n\n      if (statusCode !== 200) {\n        return __jsx(Error, {\n          statusCode: statusCode,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        });\n      }\n\n      return __jsx(Layout, {\n        title: channel.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, openPodcast && __jsx(\"div\", {\n        className: css.modal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, __jsx(PodcastsPlayer, {\n        clip: openPodcast,\n        onClose: this.onClosePodcast,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      })), __jsx(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, channel.title), series.length > 0 && __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, __jsx(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"Series\"), __jsx(\"div\", {\n        className: css.channels,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, series.map(function (serie) {\n        return __jsx(Link, {\n          href: \"/channel?id=\".concat(serie.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, __jsx(\"a\", {\n          className: css.channel,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, __jsx(\"img\", {\n          src: Channel.urls.original,\n          alt: channel.title,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }), __jsx(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, channel.title)));\n      }))), __jsx(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Ultimos Podcasts\"), __jsx(Podcast, {\n        podcasts: audioClips,\n        onClickPodcast: this.openPodcast,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(_ref) {\n      var query, res, idChannel, _ref2, _ref3, reqChannel, reqSeries, reqAudios, dataChannel, _channel, dataAudios, audios, dataSeries, series;\n\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              query = _ref.query, res = _ref.res;\n              idChannel = query.id;\n              _context.prev = 2;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(_Promise.all([fetch(\"https://api.audioboom.com/channels/\".concat(idChannel)), fetch(\"https://api.audioboom.com/channels/\".concat(idChannel, \"/child_channels\")), fetch(\"https://api.audioboom.com/channels/\".concat(idChannel, \"/audio_clips\"))]));\n\n            case 5:\n              _ref2 = _context.sent;\n              _ref3 = _slicedToArray(_ref2, 3);\n              reqChannel = _ref3[0];\n              reqSeries = _ref3[1];\n              reqAudios = _ref3[2];\n\n              if (!(reqChannel.status >= 400)) {\n                _context.next = 13;\n                break;\n              }\n\n              res.statusCode = reqChannel.status;\n              return _context.abrupt(\"return\", {\n                channel: null,\n                audio_clips: null,\n                series: null,\n                statusCode: reqChannel.status\n              });\n\n            case 13:\n              _context.next = 15;\n              return _regeneratorRuntime.awrap(reqChannel.json());\n\n            case 15:\n              dataChannel = _context.sent;\n              _channel = dataChannel.body.channel;\n              _context.next = 19;\n              return _regeneratorRuntime.awrap(reqAudios.json());\n\n            case 19:\n              dataAudios = _context.sent;\n              audios = dataAudios.body.audio_clips;\n              _context.next = 23;\n              return _regeneratorRuntime.awrap(reqSeries.json());\n\n            case 23:\n              dataSeries = _context.sent;\n              series = dataSeries.body.channels;\n              return _context.abrupt(\"return\", {\n                channel: _channel,\n                audios: audios,\n                series: series,\n                statusCode: statusCode\n              });\n\n            case 28:\n              _context.prev = 28;\n              _context.t0 = _context[\"catch\"](2);\n              return _context.abrupt(\"return\", {\n                channel: null,\n                audioClips: null,\n                series: null,\n                statusCode: 503\n              });\n\n            case 31:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[2, 28]]);\n    }\n  }]);\n\n  return channel;\n}(Component);\n\nexport default channel;","map":{"version":3,"sources":["/media/betty/740eb11b-c677-43cf-84f1-0453faa34e51/betty/ESTUDIOS/REACT/NEXT-JS/audionoom/pages/channel.js"],"names":["React","Component","css","Layout","Podcast","PodcastsPlayer","Error","channel","openPodcast","e","podcast","preventDefault","setState","props","audioClips","series","statusCode","state","title","modal","onClosePodcast","length","channels","map","serie","id","Channel","urls","original","query","res","idChannel","all","fetch","reqChannel","reqSeries","reqAudios","status","audio_clips","json","dataChannel","body","dataAudios","audios","dataSeries"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport css from './styles.scss'\nimport Layout from '../components/Layout'\nimport Podcast from '../components/Podcasts'\nimport PodcastsPlayer from '../components/PodcastPlayer'\nimport Error from './_error';\n\nclass channel extends Component {\n  state={\n    openPodcast:null\n  }\n  openPodcast = (e, podcast) => {\n    e.preventDefault();\n    this.setState({\n      openPodcast:podcast\n    })\n  }\n  onClosePodcast = e =>{\n    e.preventDefault();\n    this.setState({\n      openPodcast:null\n    })\n  }\n  static async getInitialProps({query, res}){\n    let idChannel = query.id;\n    try{\n      let [reqChannel, reqSeries, reqAudios] = await Promise.all([\n        fetch(`https://api.audioboom.com/channels/${idChannel}`),\n        fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`),\n        fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`)\n      ])\n      if(reqChannel.status >= 400){\n        res.statusCode = reqChannel.status\n        return{\n          channel:null,\n          audio_clips:null,\n          series:null,\n          statusCode: reqChannel.status\n        }\n      }\n      let dataChannel = await reqChannel.json()\n      let channel = dataChannel.body.channel;\n\n      let dataAudios = await reqAudios.json()\n      let audios = dataAudios.body.audio_clips;\n\n      let dataSeries = await reqSeries.json();\n      let series = dataSeries.body.channels;\n      return{\n        channel,audios,series, statusCode\n      }\n    } catch(e){\n      return { channel: null, audioClips: null, series: null, statusCode: 503 }\n    }\n  }\n  render() {\n    const {channel, audioClips, series, statusCode} = this.props\n    const openPodcast = this.state;\n    if(statusCode !==200){\n      return <Error statusCode={statusCode}/>\n    }\n    return (\n      <Layout title={channel.title}>\n        {\n          openPodcast && \n          <div className={css.modal}>\n            <PodcastsPlayer\n              clip={openPodcast}\n              onClose={this.onClosePodcast}\n            />\n          </div>\n        }\n      <h1>{ channel.title }</h1>\n\n       {series.length > 0  &&\n        <div>\n          <h2>Series</h2>\n          <div className={css.channels}>\n            {\n              series.map(serie =>(\n                <Link href={`/channel?id=${serie.id}`}>\n                  <a className={css.channel}>\n                  <img src={Channel.urls.original} alt={channel.title}/>\n                  <h2>{channel.title}</h2>\n                  </a>\n                </Link>\n              ))}\n          </div>\n        </div>\n       }\n        <h2>Ultimos Podcasts</h2>\n        <Podcast\n          podcasts={audioClips}\n          onClickPodcast={this.openPodcast}\n        />\n      </Layout>\n    )\n  }\n}\nexport default channel"]},"metadata":{},"sourceType":"module"}