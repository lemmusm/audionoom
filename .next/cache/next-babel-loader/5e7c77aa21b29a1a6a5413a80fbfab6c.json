{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/media/betty/740eb11b-c677-43cf-84f1-0453faa34e51/betty/ESTUDIOS/REACT/NEXT-JS/audionoom/pages/channel.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport 'isomorphic-fetch';\nimport Link from 'next/link';\nimport css from './styles.scss';\nimport Layout from '../components/Layout';\nimport Podcasts from '../components/Podcasts';\nimport PodcastsPlayer from '../components/PodcastPlayer';\nimport Error from './_error';\n\nclass channel extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"openPodcast\", (e, podcast) => {\n      e.preventDefault();\n      this.setState({\n        openPodcast: podcast\n      });\n    });\n\n    _defineProperty(this, \"onClosePodcast\", e => {\n      e.preventDefault();\n      this.setState({\n        openPodcast: null\n      });\n    });\n\n    this.state = {\n      openPodcast: null\n    };\n  }\n\n  static async getInitialProps({\n    query,\n    res\n  }) {\n    let idChannel = query.id;\n\n    try {\n      let [reqChannel, reqSeries, reqAudios] = await _Promise.all([fetch(`https://api.audioboom.com/channels/${idChannel}`), fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`), fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`)]);\n\n      if (reqChannel.status >= 400) {\n        res.statusCode = reqChannel.status;\n        return {\n          channel: null,\n          audio_clips: null,\n          series: null,\n          statusCode: reqChannel.status\n        };\n      }\n\n      let dataChannel = await reqChannel.json();\n      let channel = dataChannel.body.channel;\n      let dataAudios = await reqAudios.json();\n      let audios = dataAudios.body.audio_clips;\n      let dataSeries = await reqSeries.json();\n      let series = dataSeries.body.channels;\n      return {\n        channel,\n        audios,\n        series,\n        statusCode\n      };\n    } catch (e) {\n      return {\n        channel: null,\n        audioClips: null,\n        series: null,\n        statusCode: 503\n      };\n    }\n  }\n\n  render() {\n    const {\n      channel,\n      audioClips,\n      series,\n      statusCode\n    } = this.props;\n    const openPodcast = this.state;\n\n    if (statusCode !== 200) {\n      return __jsx(Error, {\n        statusCode: statusCode,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      });\n    }\n\n    return __jsx(Layout, {\n      title: channel.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"banner\",\n      style: {\n        backgroundImage: `url(${channel.urls.banner_image.original})`\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), openPodcast && __jsx(\"div\", {\n      className: \"modal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, __jsx(PodcastsPlayer, {\n      clip: openPodcast,\n      onClose: this.onClosePodcast,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    })), __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, channel.title), series.length > 0 && __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, __jsx(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Series\"), __jsx(\"div\", {\n      className: \"channels\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, series.map(serie => __jsx(Link, {\n      href: `/channel?id=${serie.id}`,\n      prefetch: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      className: \"channel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, __jsx(\"img\", {\n      src: serie.urls.logo_image.original,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), __jsx(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, serie.title)))))), __jsx(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Ultimos Podcasts\"), __jsx(Podcasts, {\n      podcasts: audioClips,\n      onClickPodcast: this.openPodcast,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default channel;","map":{"version":3,"sources":["/media/betty/740eb11b-c677-43cf-84f1-0453faa34e51/betty/ESTUDIOS/REACT/NEXT-JS/audionoom/pages/channel.js"],"names":["React","Component","Link","css","Layout","Podcasts","PodcastsPlayer","Error","channel","constructor","props","e","podcast","preventDefault","setState","openPodcast","state","getInitialProps","query","res","idChannel","id","reqChannel","reqSeries","reqAudios","all","fetch","status","statusCode","audio_clips","series","dataChannel","json","body","dataAudios","audios","dataSeries","channels","audioClips","render","title","backgroundImage","urls","banner_image","original","onClosePodcast","length","map","serie","logo_image"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,kBAAP;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,OAAOC,GAAP,MAAgB,eAAhB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,OAAOC,KAAP,MAAkB,UAAlB;;AAEA,MAAMC,OAAN,SAAsBP,SAAtB,CAAgC;AAC9BQ,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;;AADgB,yCAIJ,CAACC,CAAD,EAAIC,OAAJ,KAAgB;AAC5BD,MAAAA,CAAC,CAACE,cAAF;AACA,WAAKC,QAAL,CAAc;AACZC,QAAAA,WAAW,EAACH;AADA,OAAd;AAGD,KATiB;;AAAA,4CAUDD,CAAC,IAAG;AACnBA,MAAAA,CAAC,CAACE,cAAF;AACA,WAAKC,QAAL,CAAc;AACZC,QAAAA,WAAW,EAAC;AADA,OAAd;AAGD,KAfiB;;AAEhB,SAAKC,KAAL,GAAc;AAAED,MAAAA,WAAW,EAAC;AAAd,KAAd;AACD;;AAaD,eAAaE,eAAb,CAA6B;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAA7B,EAA0C;AACxC,QAAIC,SAAS,GAAGF,KAAK,CAACG,EAAtB;;AACA,QAAG;AACD,UAAI,CAACC,UAAD,EAAaC,SAAb,EAAwBC,SAAxB,IAAqC,MAAM,SAAQC,GAAR,CAAY,CACzDC,KAAK,CAAE,sCAAqCN,SAAU,EAAjD,CADoD,EAEzDM,KAAK,CAAE,sCAAqCN,SAAU,iBAAjD,CAFoD,EAGzDM,KAAK,CAAE,sCAAqCN,SAAU,cAAjD,CAHoD,CAAZ,CAA/C;;AAKA,UAAGE,UAAU,CAACK,MAAX,IAAqB,GAAxB,EAA4B;AAC1BR,QAAAA,GAAG,CAACS,UAAJ,GAAiBN,UAAU,CAACK,MAA5B;AACA,eAAM;AACJnB,UAAAA,OAAO,EAAC,IADJ;AAEJqB,UAAAA,WAAW,EAAC,IAFR;AAGJC,UAAAA,MAAM,EAAC,IAHH;AAIJF,UAAAA,UAAU,EAAEN,UAAU,CAACK;AAJnB,SAAN;AAMD;;AACD,UAAII,WAAW,GAAG,MAAMT,UAAU,CAACU,IAAX,EAAxB;AACA,UAAIxB,OAAO,GAAGuB,WAAW,CAACE,IAAZ,CAAiBzB,OAA/B;AAEA,UAAI0B,UAAU,GAAG,MAAMV,SAAS,CAACQ,IAAV,EAAvB;AACA,UAAIG,MAAM,GAAGD,UAAU,CAACD,IAAX,CAAgBJ,WAA7B;AAEA,UAAIO,UAAU,GAAG,MAAMb,SAAS,CAACS,IAAV,EAAvB;AACA,UAAIF,MAAM,GAAGM,UAAU,CAACH,IAAX,CAAgBI,QAA7B;AACA,aAAM;AACJ7B,QAAAA,OADI;AACI2B,QAAAA,MADJ;AACWL,QAAAA,MADX;AACmBF,QAAAA;AADnB,OAAN;AAGD,KA1BD,CA0BE,OAAMjB,CAAN,EAAQ;AACR,aAAO;AAAEH,QAAAA,OAAO,EAAE,IAAX;AAAiB8B,QAAAA,UAAU,EAAE,IAA7B;AAAmCR,QAAAA,MAAM,EAAE,IAA3C;AAAiDF,QAAAA,UAAU,EAAE;AAA7D,OAAP;AACD;AACF;;AACDW,EAAAA,MAAM,GAAG;AACP,UAAM;AAAC/B,MAAAA,OAAD;AAAU8B,MAAAA,UAAV;AAAsBR,MAAAA,MAAtB;AAA8BF,MAAAA;AAA9B,QAA4C,KAAKlB,KAAvD;AAEA,UAAMK,WAAW,GAAG,KAAKC,KAAzB;;AAEA,QAAGY,UAAU,KAAI,GAAjB,EAAqB;AACnB,aAAO,MAAC,KAAD;AAAO,QAAA,UAAU,EAAEA,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;AACD,WACE,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAEpB,OAAO,CAACgC,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAwB,MAAA,KAAK,EAAE;AAAEC,QAAAA,eAAe,EAAG,OAAMjC,OAAO,CAACkC,IAAR,CAAaC,YAAb,CAA0BC,QAAS;AAA7D,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAKE7B,WAAW,IAAI;AAAM,MAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACb,MAAC,cAAD;AACC,MAAA,IAAI,EAAEA,WADP;AAEC,MAAA,OAAO,EAAG,KAAK8B,cAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADa,CALjB,EAWD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMrC,OAAO,CAACgC,KAAd,CAXC,EAaCV,MAAM,CAACgB,MAAP,GAAgB,CAAhB,IACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACIhB,MAAM,CAACiB,GAAP,CAAYC,KAAD,IACX,MAAC,IAAD;AAAM,MAAA,IAAI,EAAG,eAAeA,KAAK,CAAC3B,EAAI,EAAtC;AAAyC,MAAA,QAAQ,MAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,MAAA,SAAS,EAAC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,GAAG,EAAG2B,KAAK,CAACN,IAAN,CAAWO,UAAX,CAAsBL,QAAjC;AAA4C,MAAA,GAAG,EAAC,EAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMI,KAAK,CAACR,KAAZ,CAFF,CADF,CADA,CADJ,CAFF,CAdD,EA6BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BA7BC,EA8BD,MAAC,QAAD;AACE,MAAA,QAAQ,EAAEF,UADZ;AAEE,MAAA,cAAc,EAAE,KAAKvB,WAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9BC,CADF;AAqCD;;AA9F6B;;AAgGhC,eAAeP,OAAf","sourcesContent":["import React, { Component } from 'react'\nimport 'isomorphic-fetch'\nimport Link from 'next/link'\n\nimport css from './styles.scss'\nimport Layout from '../components/Layout'\nimport Podcasts from '../components/Podcasts'\nimport PodcastsPlayer from '../components/PodcastPlayer'\nimport Error from './_error';\n\nclass channel extends Component {\n  constructor(props){\n    super(props)\n    this.state  = { openPodcast:null}\n  }\n  openPodcast = (e, podcast) => {\n    e.preventDefault();\n    this.setState({\n      openPodcast:podcast\n    })\n  }\n  onClosePodcast = e =>{\n    e.preventDefault();\n    this.setState({\n      openPodcast:null\n    })\n  }\n  static async getInitialProps({query, res}){\n    let idChannel = query.id;\n    try{\n      let [reqChannel, reqSeries, reqAudios] = await Promise.all([\n        fetch(`https://api.audioboom.com/channels/${idChannel}`),\n        fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`),\n        fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`)\n      ])\n      if(reqChannel.status >= 400){\n        res.statusCode = reqChannel.status\n        return{\n          channel:null,\n          audio_clips:null,\n          series:null,\n          statusCode: reqChannel.status\n        }\n      }\n      let dataChannel = await reqChannel.json()\n      let channel = dataChannel.body.channel;\n\n      let dataAudios = await reqAudios.json()\n      let audios = dataAudios.body.audio_clips;\n\n      let dataSeries = await reqSeries.json();\n      let series = dataSeries.body.channels;\n      return{\n        channel,audios,series, statusCode\n      }\n    } catch(e){\n      return { channel: null, audioClips: null, series: null, statusCode: 503 }\n    }\n  }\n  render() {\n    const {channel, audioClips, series, statusCode} = this.props\n\n    const openPodcast = this.state;\n    \n    if(statusCode !==200){\n      return <Error statusCode={statusCode}/>\n    }\n    return (\n      <Layout title={channel.title}>\n         \n            \n        <div className=\"banner\" style={{ backgroundImage: `url(${channel.urls.banner_image.original})` }} />\n       \n       {openPodcast && <div  className=\"modal\">\n          <PodcastsPlayer \n           clip={openPodcast}\n           onClose= {this.onClosePodcast}\n          />\n       </div>}\n     <h1>{ channel.title }</h1>\n\n     { series.length > 0 &&\n       <div>\n         <h2>Series</h2>\n         <div className=\"channels\">\n           { series.map((serie) => (\n             <Link href={`/channel?id=${ serie.id }`} prefetch>\n               <a className=\"channel\">\n                 <img src={ serie.urls.logo_image.original } alt=\"\"/>\n                 <h2>{ serie.title }</h2>\n               </a>\n             </Link>\n           ))}\n         </div>\n       </div>\n     }\n\n     <h2>Ultimos Podcasts</h2>\n     <Podcasts\n       podcasts={audioClips}\n       onClickPodcast={this.openPodcast}\n     />\n      </Layout>\n    )\n  }\n}\nexport default channel"]},"metadata":{},"sourceType":"module"}