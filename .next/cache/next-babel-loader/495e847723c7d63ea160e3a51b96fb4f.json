{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/media/betty/740eb11b-c677-43cf-84f1-0453faa34e51/betty/ESTUDIOS/REACT/NEXT-JS/audionoom/pages/channel.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport 'isomorphic-fetch';\nimport Link from 'next/link';\nimport css from './styles.scss';\nimport Layout from '../components/Layout';\nimport Podcasts from '../components/Podcasts';\nimport PodcastsPlayer from '../components/PodcastPlayer';\nimport Error from './_error';\n\nvar channel =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(channel, _Component);\n\n  function channel(props) {\n    var _this;\n\n    _classCallCheck(this, channel);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(channel).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"openPodcast\", function (e, podcast) {\n      e.preventDefault();\n\n      _this.setState({\n        openPodcast: podcast\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClosePodcast\", function (e) {\n      e.preventDefault();\n\n      _this.setState({\n        openPodcast: null\n      });\n    });\n\n    _this.state = {\n      openPodcast: null\n    };\n    return _this;\n  }\n\n  _createClass(channel, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          channel = _this$props.channel,\n          audioClips = _this$props.audioClips,\n          series = _this$props.series,\n          statusCode = _this$props.statusCode;\n      var openPodcast = this.state;\n\n      if (statusCode !== 200) {\n        return __jsx(Error, {\n          statusCode: statusCode,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        });\n      }\n\n      return __jsx(Layout, {\n        title: channel.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"banner\",\n        style: {\n          backgroundImage: \"url(\".concat(channel.urls.banner_image.original, \")\")\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }), openPodcast && __jsx(\"div\", {\n        className: \"modal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, __jsx(PodcastsPlayer, {\n        clip: openPodcast,\n        onClose: this.onClosePodcast,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      })), __jsx(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, channel.title), series.length > 0 && __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, __jsx(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \"Series\"), __jsx(\"div\", {\n        className: \"channels\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, series.map(function (serie) {\n        return __jsx(Link, {\n          href: \"/channel?id=\".concat(serie.id),\n          prefetch: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, __jsx(\"a\", {\n          className: \"channel\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        }, __jsx(\"img\", {\n          src: serie.urls.logo_image.original,\n          alt: \"\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }), __jsx(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }, serie.title)));\n      }))), __jsx(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"Ultimos Podcasts\"), __jsx(Podcasts, {\n        podcasts: audioClips,\n        onClickPodcast: this.openPodcast,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(_ref) {\n      var query, res, idChannel, _ref2, _ref3, reqChannel, reqSeries, reqAudios, dataChannel, _channel, dataAudios, audios, dataSeries, series;\n\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              query = _ref.query, res = _ref.res;\n              idChannel = query.id;\n              _context.prev = 2;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(_Promise.all([fetch(\"https://api.audioboom.com/channels/\".concat(idChannel)), fetch(\"https://api.audioboom.com/channels/\".concat(idChannel, \"/child_channels\")), fetch(\"https://api.audioboom.com/channels/\".concat(idChannel, \"/audio_clips\"))]));\n\n            case 5:\n              _ref2 = _context.sent;\n              _ref3 = _slicedToArray(_ref2, 3);\n              reqChannel = _ref3[0];\n              reqSeries = _ref3[1];\n              reqAudios = _ref3[2];\n\n              if (!(reqChannel.status >= 400)) {\n                _context.next = 13;\n                break;\n              }\n\n              res.statusCode = reqChannel.status;\n              return _context.abrupt(\"return\", {\n                channel: null,\n                audio_clips: null,\n                series: null,\n                statusCode: reqChannel.status\n              });\n\n            case 13:\n              _context.next = 15;\n              return _regeneratorRuntime.awrap(reqChannel.json());\n\n            case 15:\n              dataChannel = _context.sent;\n              _channel = dataChannel.body.channel;\n              _context.next = 19;\n              return _regeneratorRuntime.awrap(reqAudios.json());\n\n            case 19:\n              dataAudios = _context.sent;\n              audios = dataAudios.body.audio_clips;\n              _context.next = 23;\n              return _regeneratorRuntime.awrap(reqSeries.json());\n\n            case 23:\n              dataSeries = _context.sent;\n              series = dataSeries.body.channels;\n              return _context.abrupt(\"return\", {\n                channel: _channel,\n                audios: audios,\n                series: series,\n                statusCode: statusCode\n              });\n\n            case 28:\n              _context.prev = 28;\n              _context.t0 = _context[\"catch\"](2);\n              return _context.abrupt(\"return\", {\n                channel: null,\n                audioClips: null,\n                series: null,\n                statusCode: 503\n              });\n\n            case 31:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[2, 28]]);\n    }\n  }]);\n\n  return channel;\n}(Component);\n\nexport default channel;","map":{"version":3,"sources":["/media/betty/740eb11b-c677-43cf-84f1-0453faa34e51/betty/ESTUDIOS/REACT/NEXT-JS/audionoom/pages/channel.js"],"names":["React","Component","Link","css","Layout","Podcasts","PodcastsPlayer","Error","channel","props","e","podcast","preventDefault","setState","openPodcast","state","audioClips","series","statusCode","title","backgroundImage","urls","banner_image","original","onClosePodcast","length","map","serie","id","logo_image","query","res","idChannel","all","fetch","reqChannel","reqSeries","reqAudios","status","audio_clips","json","dataChannel","body","dataAudios","audios","dataSeries","channels"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport 'isomorphic-fetch'\nimport Link from 'next/link'\n\nimport css from './styles.scss'\nimport Layout from '../components/Layout'\nimport Podcasts from '../components/Podcasts'\nimport PodcastsPlayer from '../components/PodcastPlayer'\nimport Error from './_error';\n\nclass channel extends Component {\n  constructor(props){\n    super(props)\n    this.state  = { openPodcast:null}\n  }\n  openPodcast = (e, podcast) => {\n    e.preventDefault();\n    this.setState({\n      openPodcast:podcast\n    })\n  }\n  onClosePodcast = e =>{\n    e.preventDefault();\n    this.setState({\n      openPodcast:null\n    })\n  }\n  static async getInitialProps({query, res}){\n    let idChannel = query.id;\n    try{\n      let [reqChannel, reqSeries, reqAudios] = await Promise.all([\n        fetch(`https://api.audioboom.com/channels/${idChannel}`),\n        fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`),\n        fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`)\n      ])\n      if(reqChannel.status >= 400){\n        res.statusCode = reqChannel.status\n        return{\n          channel:null,\n          audio_clips:null,\n          series:null,\n          statusCode: reqChannel.status\n        }\n      }\n      let dataChannel = await reqChannel.json()\n      let channel = dataChannel.body.channel;\n\n      let dataAudios = await reqAudios.json()\n      let audios = dataAudios.body.audio_clips;\n\n      let dataSeries = await reqSeries.json();\n      let series = dataSeries.body.channels;\n      return{\n        channel,audios,series, statusCode\n      }\n    } catch(e){\n      return { channel: null, audioClips: null, series: null, statusCode: 503 }\n    }\n  }\n  render() {\n    const {channel, audioClips, series, statusCode} = this.props\n\n    const openPodcast = this.state;\n    \n    if(statusCode !==200){\n      return <Error statusCode={statusCode}/>\n    }\n    return (\n      <Layout title={channel.title}>\n         \n            \n        <div className=\"banner\" style={{ backgroundImage: `url(${channel.urls.banner_image.original})` }} />\n       \n       {openPodcast && <div  className=\"modal\">\n          <PodcastsPlayer \n           clip={openPodcast}\n           onClose= {this.onClosePodcast}\n          />\n       </div>}\n     <h1>{ channel.title }</h1>\n\n     { series.length > 0 &&\n       <div>\n         <h2>Series</h2>\n         <div className=\"channels\">\n           { series.map((serie) => (\n             <Link href={`/channel?id=${ serie.id }`} prefetch>\n               <a className=\"channel\">\n                 <img src={ serie.urls.logo_image.original } alt=\"\"/>\n                 <h2>{ serie.title }</h2>\n               </a>\n             </Link>\n           ))}\n         </div>\n       </div>\n     }\n\n     <h2>Ultimos Podcasts</h2>\n     <Podcasts\n       podcasts={audioClips}\n       onClickPodcast={this.openPodcast}\n     />\n      </Layout>\n    )\n  }\n}\nexport default channel"]},"metadata":{},"sourceType":"module"}